# frozen_string_literal: true

require 'rubygems'
require 'bundler/setup'

require 'rake'

ENV['RACK_ENV'] ||= 'development'

unless %w[production staging].include?(ENV['RACK_ENV'])
  require 'rubocop/rake_task'
  RuboCop::RakeTask.new(:rubocop)
end

task :environment do
  require File.expand_path('config/environment', __dir__)
end

desc 'List all HTTP routes available'
task routes: :environment do
  Homework::API.routes.each do |route|
    method  = route.request_method.ljust(10)
    path    = route.origin
    puts "     #{method} #{path}"
  end
end

desc 'Starts an interactive Console'
task console: :environment do
  require 'irb'
  Homework::App.instance.db_connection
  binding.irb
end
task c: :console

desc 'Starts a Server'
task :server do
  exec("bundle exec puma -p #{ENV.fetch('PORT', 3000)}")
end
task s: :server

namespace :db do
  desc 'create the database'
  task create: :environment do
    Homework::App.instance.db_create
  end

  desc 'migrate database, creates tables'
  task migrate: :environment do
    Homework::App.instance.db_migrate
  end

  desc 'generate sample data inside the db'
  task seed: :environment do
    Homework::App.instance.db_seed
  end

  desc 'Check if the database is ready'
  task check_ready: :environment do
    ready = Homework::App.instance.db_ready
    if ready
      puts 'Database is ready.'
    else
      puts 'Database is not ready.'
    end
  end
end

desc 'Generate project documentation using YARD'
task generate_docs: :environment do
  if ENV['RACK_ENV'] == 'development'
    require 'yard'

    # Configure YARD using .yardopts file (if present)
    YARD::CLI::Yardoc.run('--config', '.yardopts')
  else
    puts 'Documentation generation is only available in development environment.'
  end
end

desc 'Run tests using RSpec and show all failures'
task :test do
  sh 'bundle exec rspec spec/ | awk "/^Failures:/,/^Failed examples:/"'
end

namespace :docker do
  desc 'Stop and remove test db, ignore errors'
  task :clean_db do
    container_name_or_id = 'anynines-postgres-hw'
    volume_name = 'a9shw'
    ignore_error = '2>/dev/null'

    puts 'Stopping container...'
    system("docker stop #{container_name_or_id} #{ignore_error}")
    puts 'Removing container...'
    system("docker rm #{container_name_or_id} #{ignore_error}")
    puts 'Removing volume...'
    system("docker volume rm #{volume_name} #{ignore_error}")
  end

  desc 'Launch db instance inside docker'
  task :start_db do
    volume_name = 'a9shw'

    puts 'Creating volume...'
    system("docker volume create #{volume_name}")
    puts 'Running docker-compose...'
    system('docker-compose up -d')
  end
end
